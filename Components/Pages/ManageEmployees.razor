@page "/manage_employees"
@using System.Threading.Tasks
@using System.Text
@using AttendanceManagement.Components.Data.Services
@using System.Globalization



<Modal IsVisible="@showError" IsVisibleChanged="HandleErrorChanged">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">Information</h3>
    </div>
    <div class="modal-body">
        <p>@error</p>
    </div>

    <div class="modal-footer" style="align-items: flex-end">
        <button class="btn btn-secondary btn-small" @onclick="ToggleErrorClose">OK</button>
    </div>
</Modal>





<Modal IsVisible="@showError" IsVisibleChanged="HandleErrorChanged">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">Information</h3>
    </div>
    <div class="modal-body">
        <p>@error</p>
    </div>

    <div class="modal-footer" style="align-items: flex-end">
        <button class="btn btn-secondary btn-small" @onclick="ToggleErrorClose">OK</button>
    </div>
</Modal>

<Modal IsVisible="@showError" IsVisibleChanged="HandleErrorChanged">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">Information</h3>
    </div>
    <div class="modal-body">
        <p>@error</p>
    </div>

    <div class="modal-footer" style="align-items: flex-end">
        <button class="btn btn-secondary btn-small" @onclick="ToggleErrorClose">OK</button>
    </div>
</Modal>


<Modal IsVisible="@isManageEmployeeVisible" IsVisibleChanged="HandleIsVisibleChanged">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">Manage Staff</h3>
        <button class="close-button" @onclick="ToggleShowEmployee">X</button>
    </div>
    <div class="modal-body">
        <div style="display: flex;gap: 12px">
            <div style="display: flex;gap: 8px;flex: 0.7">
                <div class="form-group" style="width: 30%">
            <label for="employeeTitle">Title <sup>*</sup></label>
            <input type="text" id="employeeTitle" class="form-control" placeholder="Title" @bind="@employee.Title">
        </div>

                <div class="form-group" style="width: 70%">
            <label for="employeeFirstName">First Name <sup>*</sup></label>
            <input type="text" id="employeeFirstName" class="form-control" placeholder="Enter First Name" @bind="@employee.FirstName">
        </div>
            </div>
        <div class="form-group" style="flex: 0.7">
            <label for="employeeLastName">Last Name <sup>*</sup></label>
            <input type="text" id="employeeLastName" class="form-control" placeholder="Enter Last Name" @bind="@employee.LastName">
        </div>
        </div>
        <div style="display: flex;gap: 12px">
            <div class="form-group" style="flex: 0.7">
            <label for="employeeEmail">Email <sup>*</sup></label>
            <input type="email" id="employeeEmail" class="form-control" placeholder="Enter Email" @bind="@employee.Email">
             </div>
            <div class="form-group" style="flex: 0.7">
            <label for="employeeTelephone">Telephone <sup>*</sup></label>
            <input type="tel" id="employeeTelephone" class="form-control" placeholder="Enter Telephone" @bind="@employee.Telephone">
                </div>
        </div>

        <div style="display: flex;gap: 12px">
            <div class="form-group" style="flex: 0.7">
            <label for="employeeTypeOfStaff">Type Of Staff <sup>*</sup></label>
            <div class="custom-select">
            <select id="employeeTypeOfStaff" class="form-control" @bind="@employee.TypeOfStaffId">
                @foreach (var type in typesOfStaff)
                {
                    <option value="@type.Id">@type.StaffType</option>
                }
            </select>
            </div>
            </div>
            <div class="form-group" style="flex: 0.7"></div>
        </div>
        @if (employee.Id != Guid.Empty)
        {
            <div>
                <div style="display: flex;margin-bottom: 8px;justify-content: space-between; align-items: center">
                    <div style="display: flex; flex-direction: column">
                        <h6><b>Leaves</b></h6>
                    </div>
                    <button class="btn btn-primary" @onclick="ToggleShowLeave">Add New Leave</button>

                </div>
                <div class="tableFixHead">

                    <table>
                        <thead>
                            <tr>
                                <th>Leave</th>
                                <th>Start</th>
                                <th>End</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var item in GetEmployeeLeaves())
                            {
                                <tr @onclick="() => { leave = item ; ToggleShowLeave(); }">
                                    <td>@item.Reason</td>
                                    <td>@item.StartDate.ToString("dd-MM")</td>
                                    <td>@item.EndDate.ToString("dd-MM")</td>
                                    <td>
                                        <div style="height:30px" @onclick:stopPropagation="true" @onclick="() => { leave = item ; ToggleDeleteLeaveClose();}">
                                            <svg xmlns="http://www.w3.org/2000/svg" height="100%" id="Layer_2" data-name="Layer 2" viewBox="0 0 512 512">
                                                <g id="Layer_1-2" data-name="Layer 1">
                                                    <g>

                                                        <path d="M189.23,58.27c0-9.04.11-17.29-.04-25.53-.1-5.1,2.11-7.36,7.21-7.36,46.95.05,93.91.07,140.86-.01,5.32,0,7.12,2.55,7.06,7.44-.1,8.23-.03,16.47-.03,25.48,3.24,0,5.78,0,8.31,0,24.66,0,49.33.17,73.99-.09,6.5-.07,8.94,2.35,8.86,8.71-.2,16.12-.17,32.24-.02,48.36.05,5.95-2.19,8.74-8.42,8.38-5.88-.33-11.79-.07-18.25-.07-.58,8.33-1.3,16.28-1.67,24.25-3.01,63.91-5.9,127.82-8.92,191.73-1.75,36.92-3.81,73.83-5.37,110.77-.31,7.31-3.99,8.53-10.03,8.51-47.9-.1-95.8-.07-143.7-.08-29.17,0-58.34,0-87.5-.05-9.82-.01-10.31-.77-10.77-10.42-2.11-43.78-4.41-87.56-6.57-131.34-1.63-33.13-3.12-66.27-4.69-99.41-1.48-30.99-2.99-61.97-4.53-93.94-6.25,0-12.32-.17-18.37.05-5.98.21-8.62-2.2-8.53-8.38.21-16.12.24-32.24-.02-48.36-.11-6.57,2.73-8.75,8.98-8.71,27.02.16,54.04.07,82.18.07ZM135.91,123.91c5.23,108.31,10.43,216.04,15.62,323.57h230.37c5.21-108.06,10.4-215.63,15.61-323.57H135.91ZM109.36,112.22h314.51v-42.41H109.36v42.41ZM200.54,57.87h132.22v-21.35h-132.22v21.35Z" stroke-width="0" />
                                                        <path d="M135.91,123.91h261.61c-5.21,107.94-10.4,215.51-15.61,323.57h-230.37c-5.19-107.53-10.39-215.26-15.62-323.57ZM209.43,287.33s.03,0,.04,0c0-38.6,0-77.19,0-115.79,0-1.65.49-3.66-.26-4.88-1.09-1.79-3.26-4.35-4.67-4.17-1.96.24-4.5,2.4-5.22,4.32-.94,2.51-.42,5.6-.42,8.44,0,73.16,0,146.33.02,219.49,0,3.79-.42,7.69.36,11.32.41,1.9,3.34,4.88,4.56,4.62,2.06-.43,4.12-2.77,5.32-4.82.84-1.43.27-3.7.27-5.59,0-37.65,0-75.3,0-112.95ZM261.41,286.65c0,37.88,0,75.77,0,113.65,0,2.13-.57,4.63.35,6.28,1.04,1.88,3.36,3.92,5.31,4.13,1.45.15,3.69-2.26,4.64-4.03.8-1.49.31-3.7.31-5.59,0-75.05,0-150.11-.01-225.16,0-2.6.54-5.42-.27-7.75-.79-2.26-3.01-4.01-4.6-5.99-1.87,1.95-4.33,3.61-5.43,5.92-.92,1.95-.29,4.65-.29,7.02,0,37.17,0,74.35-.01,111.52ZM323.85,287.24h.07c0,37.93,0,75.86.01,113.79,0,1.89-.5,4.2.39,5.58,1.18,1.85,3.39,3.9,5.34,4.11,1.41.15,3.63-2.29,4.56-4.06.79-1.51.29-3.71.29-5.6.01-75.87.05-151.73-.04-227.6,0-4.35,1.94-11.01-5.23-11.04-7.18-.02-5.28,6.73-5.3,11.03-.16,37.93-.09,75.86-.09,113.8Z" fill="transparent" stroke-width="0" />
                                                        <path d="M109.36,112.22v-42.41h314.51v42.41H109.36Z" fill="transparent" stroke-width="0" />
                                                        <path d="M200.54,57.87v-21.35h132.22v21.35h-132.22Z" fill="transparent" stroke-width="0" />
                                                        <path d="M209.43,287.33c0,37.65,0,75.3,0,112.95,0,1.89.57,4.16-.27,5.59-1.2,2.04-3.26,4.39-5.32,4.82-1.22.25-4.15-2.72-4.56-4.62-.78-3.63-.36-7.53-.36-11.32-.02-73.16-.02-146.33-.02-219.49,0-2.84-.53-5.93.42-8.44.72-1.92,3.26-4.07,5.22-4.32,1.41-.18,3.58,2.38,4.67,4.17.75,1.23.26,3.23.26,4.88,0,38.6,0,77.19,0,115.79-.01,0-.03,0-.04,0Z" stroke-width="0" />
                                                        <path d="M261.41,286.65c0-37.17,0-74.35,0-111.52,0-2.37-.63-5.07.29-7.02,1.1-2.31,3.56-3.98,5.43-5.92,1.59,1.97,3.81,3.73,4.6,5.99.82,2.33.27,5.15.27,7.75,0,75.05.01,150.11.01,225.16,0,1.89.49,4.1-.31,5.59-.96,1.77-3.2,4.18-4.64,4.03-1.95-.2-4.27-2.25-5.31-4.13-.92-1.65-.35-4.16-.35-6.28-.01-37.88,0-75.77,0-113.65Z" stroke-width="0" />
                                                        <path d="M323.85,287.24c0-37.93-.07-75.86.09-113.8.02-4.3-1.88-11.05,5.3-11.03,7.17.02,5.22,6.69,5.23,11.04.09,75.87.05,151.73.04,227.6,0,1.9.5,4.1-.29,5.6-.93,1.77-3.15,4.21-4.56,4.06-1.95-.21-4.16-2.26-5.34-4.11-.88-1.38-.38-3.68-.39-5.58-.01-37.93-.01-75.86-.01-113.79h-.07Z" stroke-width="0" />
                                                    </g>
                                                </g>
                                            </svg>
                                        </div>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
        <div class="modal-footer" style="margin-top: 12px">
        <button class="btn btn-primary" style="margin-right: 8px" @onclick="AddOrUpdateEmployeeAndClose">Save Employee</button>
        <button class="btn btn-secondary" @onclick="ToggleShowEmployee">Cancel</button>
    
    </div>
</Modal>


<Modal IsVisible="@isManageLeaveVisible" IsVisibleChanged="HandleIsVisibleChanged2">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">ManageLeave</h3>
        <button class="close-button" @onclick="ToggleShowLeave">X</button>
    </div>
    <div class="modal-body">
        <div class="form-group">
            <label for="leaveName">Leave Name <sup>*</sup></label>
            <input type="text" id="leaveName" class="form-control" placeholder="Enter Leave Name" @bind="@leave.Reason">
        </div>
        <div class="form-group">
            <label for="startDate">Start Date <sup>*</sup></label>
            <input style="height: 2.7rem;width: 50%; border: 1px solid grey;" type="date" @bind-value="leave.StartDate"
            @bind-value:event="oninput" placeholder="Search">
        </div>
        <div class="form-group">
            <label for="endDate">End Date <sup>*</sup></label>
            <input style="height: 2.7rem;width: 50%; border: 1px solid grey;" type="date" @bind-value="leave.EndDate"
            @bind-value:event="oninput" placeholder="Search">
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn btn-primary" style="margin-right: 8px"  @onclick="AddOrUpdateLeaveAndClose">Save Leave</button>
        <button class="btn btn-secondary" @onclick="ToggleShowLeave">Cancel</button>
    </div>
</Modal>



<Modal IsVisible="@isShowEmployeeDelete" IsVisibleChanged="HandleDeleteUserChanged">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">Confirm Staff Deletion</h3>
    </div>
    <div class="modal-body">
        <p>
            You are about to delete @employee.FirstName This cannot be undone.
        </p>
    </div>

    <div class="modal-footer" style="align-items: flex-end">

        <button class="btn btn-primary btn-small" style="margin-right: 8px" @onclick="ToggleDeleteClose">No</button>
        <button class="btn btn-secondary btn-small" @onclick="DeleteEmployee">Yes</button>
    </div>
</Modal>


@if (isShowLeaveDelete)
{
    <Modal IsVisible="@isShowLeaveDelete" IsVisibleChanged="HandleDeleteLeaveChanged">
        <div class="modal-header">
            <h3 style="font-size: 1.2rem;">Confirm Deletion</h3>
        </div>
        <div class="modal-body">
            <p>
                Are you sure you want to delete this record? This action cannot be undone.
            </p>
        </div>

        <div class="modal-footer" style="align-items: flex-end">

            <button class="btn btn-primary btn-small" style="margin-right: 8px" @onclick="ToggleDeleteLeaveClose">No</button>
            <button class="btn btn-secondary btn-small" @onclick="DeleteLeave">Yes</button>
        </div>
    </Modal>
}



@if (isShowingSmsDialog){
<Modal IsVisible="@isShowingSmsDialog" IsVisibleChanged="HandleShowSmsDialogChanged">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">Send SMS</h3>
        <button class="close-button" @onclick="ToggleShowSmsDialog">X</button>
    </div>
    <div class="modal-body">
        <div>
            <label for="smsMessage">Message:</label>
            <input type="text" id="smsMessage" @bind="smsMessage" />
        </div>
        
        <div>
    <h4>Recipients:</h4>
    <p>@DisplayRecipients()</p>
</div>

    </div>
    <div class="modal-footer">
        <button class="btn btn-primary" style="margin-right: 8px"  @onclick="SendMessage">Send</button>
        <button class="btn btn-secondary" @onclick="ToggleShowSmsDialog">Cancel</button>
    </div>
</Modal>

}


@if (isShowingExportDialog)
{
<Modal IsVisible="@isShowingExportDialog" IsVisibleChanged="HandleShowExportDialogChanged">
    <div class="modal-header">
        <h3 style="font-size: 1.2rem;">Generate Report</h3>
        <button class="close-button" @onclick="ToggleShowExportDialog">X</button>
    </div>
    <div class="modal-body">
        <div>
    <h5>Generating report for:</h5>
    <p>@DisplayRecipients()</p>
                <div style="margin-top: 4px">
                    <p >
                        Define period to generate for:
                    </p>
                    @if (academicYear != null)
                    {
                        <p>or Select terms to generate for</p>

                        <div>
                            <label>
                                <input type="checkbox" @bind="exportTermsChecked[0]" @onclick:stopPropagation="true" />
                                Term1
                            </label>
                        </div>
                        <div>
                            <label>
                                <input type="checkbox" @bind="exportTermsChecked[1]" @onclick:stopPropagation="true" />
                                Term2
                            </label>
                        </div>
                        <div>
                            <label>
                                <input type="checkbox" @bind="exportTermsChecked[2]" @onclick:stopPropagation="true" />
                                Term3
                            </label>
                        </div>
                    }
                    else
                    {
                        <p>Set up academic year information</p>
                    }
                </div>
    
</div>

    </div>
    <div class="modal-footer">
        <button class="btn btn-primary" style="margin-right: 8px"  @onclick="ExportToPdf">Export</button>
        <button class="btn btn-secondary" @onclick="ToggleShowExportDialog">Cancel</button>
    </div>
</Modal>

}

@if (isBusy == false) {
<div style="margin: 20px;">
        <div style="padding: 20px; box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);">
        <div style="display: flex;justify-content: space-between; align-items: center">
        <div style="display:2  flex; flex-direction: column">
            <h6><b>Employee Management</b></h6>
                    <p class="titleSubtext">Administration for staff</p>
        </div>
                <div style="display: flex">
                    <button class="btn btn-secondary" style="width: 200px !important;margin-right: 5px" @onclick="ToggleShowExportDialog">Generate Report</button>
                    <button class="btn btn-secondary" style="width: 150px !important;margin-right: 5px" @onclick="ToggleShowSmsDialog">Send SMS</button>
                    <button class="btn btn-primary" style="width: 150px !important;margin-right: 5px" @onclick="ToggleShowEmployee">Add New Staff</button>
           </div>
        </div>
        <div style="display: flex;justify-content: space-between; align-items: center">
                <div class="search-container">
                    <svg style="height: 20px;margin-left: 8px;margin-right: 8px" xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 512 512">
                        <path d="M10.88,214.5c0,112.54,91.56,204,204,204,51.8,0,99.19-19.48,135.23-51.4l130.01,130.01c2.41,2.41,5.52,3.61,8.73,3.61s6.32-1.2,8.73-3.61c4.82-4.82,4.82-12.55,0-17.37l-130.11-130.01c31.92-36.04,51.4-83.33,51.4-135.23,0-112.54-91.56-204-204-204S10.88,101.96,10.88,214.5ZM394.27,214.5c0,98.89-80.51,179.4-179.4,179.4S35.47,313.38,35.47,214.5,115.99,35.1,214.87,35.1s179.4,80.41,179.4,179.4Z" stroke-width="0" />
                    </svg>
                    <input class="search-input"
                       type="text" @bind-value="@SearchText" placeholder="Search Employee"  @oninput="HandleSearch">

                    <div class="clear-button-container" style="@(searchTextEmpty ? "visibility: hidden;" : "visibility: visible;")" @onclick="ClearSearch">
                        <svg class="clear-button" xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 512 512">
                            <path d="M259.73,482.34c-39.67-.7-75.33-8.45-108.87-25.47-28.19-14.3-52.32-33.39-72.96-57.44-16.46-19.17-27.73-40.92-37.54-63.89-11.13-26.05-15.07-53.28-15.03-81.19.03-23.33,3.42-46.43,11.74-68.28,8.73-22.91,19.17-45.17,34.67-64.51,20.01-24.98,43.77-45.79,71.99-60.99,30.84-16.61,63.84-26.14,98.99-28.2,40.42-2.37,78.81,5.07,115.42,22.28,27.54,12.95,51.3,30.69,72.06,53.05,14.57,15.7,25.45,33.46,35.41,52.13,16.86,31.61,23.23,65.6,22.96,100.92-.22,28.33-5.5,56.04-17.24,81.89-9.39,20.66-20.47,40.62-35.65,57.82-19.95,22.61-42.99,41.55-69.89,55.28-29.54,15.07-60.92,24.06-94.22,25.75-4.7.24-9.39.66-11.84.83v.02ZM262.55,467.5c5.66.32,16.83-.94,27.89-2.63,41.11-6.29,77.53-23.14,109.57-49.59,13.5-11.15,24.7-24.52,35.1-38.36,18.55-24.69,29.15-53.31,35.25-83.18,5.72-28,4.93-56.21-2.79-84.25-8.16-29.62-19.5-57.34-39.61-81.05-10.52-12.4-21.32-24.28-34.27-34.38-21.81-17-45.65-29.61-72.06-37.73-34.38-10.56-69.24-12.4-104.49-6.13-41.17,7.32-77.1,25.67-108.36,53.21-15.09,13.3-27.6,29.07-37.91,46.13-23.27,38.51-32.85,80.55-28.83,125.49,3.25,36.24,14.11,69.76,35.81,99.44,10.85,14.84,22.1,29.16,36.74,40.67,11.51,9.04,23.04,17.79,35.95,24.91,33.2,18.31,68.71,26.92,112.03,27.47l-.02-.02Z" stroke="#000" stroke-miterlimit="10" stroke-width="5" />
                            <path d="M181.08,175.79c2.55-.15,4.61,1.06,6.41,2.83,2.77,2.74,5.51,5.52,8.29,8.25,18.19,17.86,36.39,35.71,54.59,53.57.35.34.69.69,1.05,1.02,5.85,5.3,5.82,5.27,11.52-.35,19.9-19.6,39.82-39.18,59.78-58.72,1.85-1.81,3.94-3.38,6.02-4.93,3.37-2.5,7.76-2.31,10.15.54,2.68,3.2,2.57,6.75-.07,9.77-3.42,3.9-6.95,7.81-10.97,11.06-6.09,4.93-11.32,10.71-16.91,16.12-13.17,12.77-26.22,25.67-39.48,38.34-2.97,2.84-2.84,4.6.05,7.4,17.27,16.71,34.24,33.73,51.62,50.32,4.92,4.7,10.06,9.18,14.81,14.07,3.69,3.79,3.95,8.16.91,11.22-2.91,2.93-6.87,2.7-10.92-.41-3.23-2.48-6.18-5.24-9.07-8.09-19.31-19.04-38.71-37.99-57.95-57.1-2.53-2.51-4.37-2.8-6.83-.29-1.24,1.27-2.8,2.21-4.06,3.46-20.51,20.14-41,40.3-61.5,60.45-1.85,1.82-3.6,3.69-6.47,3.99-3.36.35-6.24-.34-7.99-3.39-1.83-3.17-1.36-6.28,1.13-8.96,1.88-2.02,3.71-4.17,5.92-5.78,3.05-2.22,5.61-4.92,8.27-7.53,17.63-17.28,35.18-34.63,52.93-51.79,3.07-2.97,3.16-4.74.04-7.77-19.24-18.65-38.25-37.53-57.45-56.22-3.13-3.04-6.83-5.5-9.64-8.89-2.17-2.61-2.71-5.54-1.15-8.61,1.4-2.77,3.88-3.78,6.99-3.59h-.02Z" stroke="#000" stroke-miterlimit="10" stroke-width="5" />
                        </svg>
                    </div>
                    
                </div>
            <div style="display: flex">
                @foreach (var item in typesOfStaff)
                {
                        <button class="@(selectedTypeOfStaff == item ? "btn btn-primary":"btn btn-secondary")" style="margin-right: 5px" @onclick="() => {selectedTypeOfStaff = item; employeesToDisplay = employees.Where(e=> e.TypeOfStaff == item).ToList();}">@item.StaffType</button>
                }
            </div>
        </div>

    </div>
        <div class="tableFixHead" style="max-height: calc(90vh - 130px);">

        <table>
            <thead>
                <tr>
                        <th>
                            <input type="checkbox" @onchange="ToggleSelectAll" checked="@selectAll" />
                        </th>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Email Address</th>
                    <th>Telephone</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                    @foreach (var item in employeesToDisplay.Where(e => e.Username != "BMA000" && e.IsDeleted == false))
                {
                        <tr @onclick="() => { employee = item ; ToggleShowEmployee(); }">
                            <td>
                                <input type="checkbox" @onclick:stopPropagation="true" @onchange="(e) => ToggleEmployeeSelection(item.Id)" checked="@IsEmployeeSelected(item.Id)" />
                            </td>
                        <td>@item.Username</td>
                        <td>@item.FirstName @item.LastName</td>
                        <td>@item.Email</td>
                        <td>@item.Telephone</td>
                            <td>
                                <div style="height:30px" @onclick:stopPropagation="true" @onclick="() => { employee = item ; ToggleDeleteClose();}">
                                    <svg height="100%" xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 512 512">
                                        <path d="M255.54,93.94c-43.01,0-86.02-.07-129.02.03-18.68.05-20.84,2.59-20.26,22.36.09,3.17.26,6.35.46,9.51,5.95,91.83,11.87,183.65,17.87,275.48,1.95,29.85,4.19,59.68,6.14,89.53.75,11.52,5.81,16.84,17.39,16.79,70.81-.26,141.62-.29,212.43.07,13.27.07,19.09-6.11,19.85-19.22,1.08-18.55,2.31-37.1,3.49-55.64,2.99-47.05,5.92-94.1,9-141.14,3.84-58.81,7.99-117.59,11.59-176.42,1.14-18.59-1.74-21.24-19.91-21.3-43.01-.12-86.02-.04-129.02-.05ZM274.46,7.16c-10.84.75-22.95,1.76-35.09,2.38-19.42.99-25.63-4.45-23.73,24.52.64,9.75-3.33,14.01-12.75,14.24-11.7.28-23.37,1.63-35.07,2.3-19.07,1.08-38.15,1.84-57.21,3.04-7.36.46-16.7.9-16.34,11.18.35,9.81,9.4,8.66,16.3,8.77,2.17.04,4.34-.06,6.51-.18,81.46-4.56,162.92-9.11,244.39-13.71,15.6-.88,31.21-1.68,46.76-3.11,6.03-.55,13.32-2.32,13.11-10.39-.22-8.35-7.52-8.9-13.71-8.95-6.5-.05-13,.56-19.49.93-24.26,1.38-48.55,2.45-72.78,4.33-11.21.87-15.31-3.92-16.45-15.17-2.11-20.81-2.61-20.75-24.45-20.18Z" stroke-width="0" />
                                        <path d="M255.65,113.16c37.38,0,74.75-.18,112.13.08,16.8.12,17.49.85,16.39,19.03-3.38,55.69-7.14,111.35-10.74,167.02-3.37,52.05-6.45,104.12-10.16,156.14-2.79,39.16-.65,33.09-33.05,33.32-53.89.38-107.79.11-161.69.08-18.71-.01-19.36-.01-20.72-18.81-4.35-60.16-8.18-120.35-12.18-180.54-3.21-48.42-6.36-96.85-9.55-145.27-.18-2.72-.46-5.43-.6-8.15-1.19-22.45-.54-23.29,20.64-23.34,36.51-.09,73.02-.02,109.53-.02v.46ZM180.84,300.7c0,46.24-.01,92.48.02,138.72,0,4.53.08,9.08.57,13.57.47,4.33,2.49,8.07,7.04,8.55,5.23.55,8-3.29,9.13-7.91.95-3.89,1.14-8.06,1.18-12.11.14-16.32.1-32.64.1-48.96,0-77.52.05-155.03-.15-232.55-.02-7.62,2.42-19.09-8.61-19.48-11.48-.4-8.49,11.13-9.23,18.75-.26,2.69-.05,5.44-.05,8.16,0,44.43,0,88.85,0,133.28ZM263.71,302.05c0-47.15.12-94.3-.12-141.45-.04-7.69,2.21-19.48-8.28-19.83-11.95-.41-9.35,11.99-9.37,19.91-.21,93.85-.19,187.69,0,281.54.01,7.65-2.2,19.25,8.86,19.21,10.99-.04,8.77-11.6,8.8-19.28.22-46.7.11-93.39.11-140.09ZM328.69,301.65c0-46.22.2-92.45-.19-138.67-.07-8.14,3.71-21.68-9.02-21.4-12.41.27-8.54,13.71-8.57,21.9-.29,92.45-.19,184.89-.17,277.34,0,3.62.06,7.27.53,10.85.69,5.29,2.73,10.15,8.7,9.87,5.73-.27,7.96-4.91,8.37-10.35.33-4.51.36-9.05.36-13.58.02-45.32.01-90.63-.01-135.95Z" fill="#fff" stroke-width="0" />
                                        <path d="M254.39,45.7c-3.33,0-7.64.02-11.95,0-4.79-.03-6.93-2.76-7.22-7.58-.27-4.6,1.02-8.21,5.74-9.07,10.67-1.94,21.46-1.86,32.23-1.22,4.63.28,6.8,3.34,6.97,8.07.17,4.91-2.37,7.74-6.74,8.31-5.98.77-12.02.97-19.03,1.49Z" fill="#fff" stroke-width="0" />
                                    </svg>
                                </div>
                            </td>
                    </tr>
                }
              


            </tbody>
        </table>
    </div>
    </div>
}else
{
    
}
@code {
    String SearchText = "";
    private Employee employee = new();
    private bool isManageEmployeeVisible = false;
    private bool isManageLeaveVisible = false;
    List<Employee> employees = new();
    List<Employee> employeesToDisplay = new();
    List<SelectEmployee> selectedEmployeesForMessage = new();
    List<TypeOfStaff> typesOfStaff = new();
    TypeOfStaff selectedTypeOfStaff = new();
    Leave leave = new();
    private bool showError = false;
    private bool isShowingSmsDialog = false;
    String error = "";
    bool selectAll = false;
    bool isBusy = true;
    bool isShowEmployeeDelete = false;
    bool isShowLeaveDelete = false;
    DateTime reportStateDate = DateTime.Now;
    AcademicYear? academicYear;
    DateTime reportEndDate = DateTime.Now;
    private TimeSpan CutoffTime = TimeSpan.FromHours(8);
    DateTime ExportStartDate { get; set; }
    DateTime ExportEndDate { get; set; } = DateTime.Now;
    private string ExportMaxDate => DateTime.Now.ToString("yyyy-MM-dd", CultureInfo.InvariantCulture);
    private void ToggleErrorClose()
    {
        showError = !showError;
    }
    private bool[] exportTermsChecked = new bool[3];

    private Dictionary<Guid, bool> selectedEmployees = new Dictionary<Guid, bool>();

    private void ToggleEmployeeSelection(Guid employeeId)
    {
        if (selectedEmployees.ContainsKey(employeeId))
        {
            selectedEmployees.Remove(employeeId);
        }
        else
        {
            selectedEmployees[employeeId] = true;
        }
    }

    private bool IsEmployeeSelected(Guid employeeId)
    {
        return selectedEmployees.ContainsKey(employeeId) && selectedEmployees[employeeId];
    }

    private void ToggleSelectAll()
    {
        selectAll = !selectAll;
        foreach (var employee in employeesToDisplay)
        {
            selectedEmployees[employee.Id] = selectAll;
        }
    }

    private void HandleErrorChanged(bool isVisible)
    {
        showError = isVisible;
    }

    private List<Leave> GetEmployeeLeaves()
    {
        return MyDbContext.Leaves.Where(e => e.EmployeeID == employee.Id && e.IsDeleted == false).ToList();
    }

    private void ClearSearch()
    {
        SearchText = "";
        employeesToDisplay = employees;
    }
    private void HandleSearch(ChangeEventArgs eventArgs)
    {

        string searchValue = eventArgs.Value.ToString().ToLower();

        if (string.IsNullOrEmpty(searchValue))
        {
            searchTextEmpty = true;
        }
        else
        {
            searchTextEmpty = false;
        }
        employeesToDisplay = employees.Where(e =>
            e.FirstName.ToLower().Contains(searchValue) ||
            e.LastName.ToLower().Contains(searchValue) ||
            (e.FirstName + " " + e.LastName).ToLower().Contains(searchValue) ||
            (e.LastName + " " + e.FirstName).ToLower().Contains(searchValue)
        ).ToList();
    }

    bool searchTextEmpty = true;
    private void HandleInputChange(ChangeEventArgs args)
    {   

        employeesToDisplay = employees.Where(e => e.FirstName.Contains(SearchText) || e.LastName.Contains(SearchText)).ToList();
    }

    protected override void OnInitialized()
    {
        isBusy = true;
        load();
        isBusy = false;
    }

    private void load()
    {
        try
        {
            typesOfStaff = MyDbContext.TypeOfStaffs.Where(e => e.IsDeleted == false).ToList();
            employees = MyDbContext.Employees.Where(e => e.IsDeleted == false).ToList();
            employeesToDisplay = employees;
            if (typesOfStaff.Count > 0)
                employee.TypeOfStaffId = typesOfStaff[0].Id;

            var academicYears = MyDbContext.AcademicYears.Include(e => e.Terms).ToList();

            if (academicYears.Count > 0)
            {
                academicYear = GetActiveOrClosestAcademicYear(academicYears);
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private static readonly Random random = new Random();

    public static string GeneratePassword(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+";
        var stringBuilder = new StringBuilder(length);

        for (int i = 0; i < length; i++)
        {
            stringBuilder.Append(chars[random.Next(chars.Length)]);
        }

        return stringBuilder.ToString();
    }

    public static string ConvertLocalNumber(string localNumber)
    {
        return MessageService.ConvertToInternationalFormat(localNumber);
    }

    private void AddOrUpdateEmployeeAndClose()
    {
        AddOrUpdateEmployee();
        ToggleShowEmployee();
    }

    private void AddOrUpdateEmployee()
    {
        try
        {
            if (employee.Id == Guid.Empty)
            {
                employee.Id = Guid.NewGuid();
                employee.TenantId = Guid.Parse("00000000-0000-0000-0000-000000000000");
                employee.Role = "User";
                employee.IsDeleted = false;
                employee.TypeOfStaff = typesOfStaff.FirstOrDefault(e => e.Id == employee.TypeOfStaffId);

                string password = GeneratePassword(8);
                UserAuth userAuth = new()
                    {
                        Id = Guid.NewGuid(),
                        TenantId = Guid.Parse("00000000-0000-0000-0000-000000000000"),
                        Email = employee.Email,
                        PasswordHash = SecretHasher.Hash(password),
                        Username = employee.TypeOfStaff.IdPrefix + (MyDbContext.Employees.Count() + 1).ToString("D3"),
                    };
                MyDbContext.UserAuths.Add(userAuth);
                MessageService.SendSms(phoneNumbers: [ employee.Telephone ], message: $"Hi {employee.Title} {employee.LastName}, you've been registered in our attendance system. Your username is {userAuth.Username} and your password is {password}. We're excited to have you on board!");
                MessageService.sendCredentialsToUser(employee.Title + " " + employee.LastName, userAuth.Username, password, employee.Email);

                employee.Username = userAuth.Username;
                MyDbContext.Employees.Add(employee);
                employees.Add(employee);
            }
            else
            {
                MyDbContext.Employees.Update(employee);
                int index = employees.FindIndex(e => e.Id == employee.Id);
                employees[index] = employee;
            }

            employee = new();
            MyDbContext.SaveChanges();
        }
        catch (Exception ex)
        {
            error = ex.InnerException != null ? ex.InnerException.Message : ex.Message;
            showError = true;
        }
    }

    private void HandleIsVisibleChanged(bool isVisible)
    {
        isManageEmployeeVisible = isVisible;
    }

    private void HandleDeleteUserChanged(bool isVisible)
    {
        isShowEmployeeDelete = isVisible;
    }

    private void ToggleDeleteClose()
    {
        isShowEmployeeDelete = !isShowEmployeeDelete;
    }

    private void DeleteEmployee()
    {
        employee.IsDeleted = true;
        AddOrUpdateEmployee();
        ToggleDeleteClose();
    }

    private void ToggleShowEmployee()
    {
        isManageEmployeeVisible = !isManageEmployeeVisible;
        if (!isManageEmployeeVisible)
        {
            employee = new();
        }
    }

    private void HandleIsVisibleChanged2(bool isVisible)
    {
        isManageLeaveVisible = isVisible;
    }

    private void ToggleShowLeave()
    {
        isManageLeaveVisible = !isManageLeaveVisible;
        if (!isManageLeaveVisible)
        {
            leave = new();
        }
    }


    private string smsMessage = "";
    private void ToggleShowSmsDialog()
    {
        isShowingSmsDialog = !isShowingSmsDialog;
        if (!isShowingSmsDialog)
        {
            smsMessage = "";
        }
    }

    private void HandleShowSmsDialogChanged(bool isVisible)
    {
        isShowingSmsDialog = isVisible;
    }

    bool isShowingExportDialog = false;

    private void ToggleShowExportDialog()
    {
        isShowingExportDialog = !isShowingExportDialog;
    }

    private void HandleShowExportDialogChanged(bool isVisible)
    {
        isShowingExportDialog = isVisible;
    }


    private void HandleDeleteLeaveChanged(bool isVisible)
    {
        isShowLeaveDelete = isVisible;
    }

    private void ToggleDeleteLeaveClose()
    {
        isShowLeaveDelete = !isShowLeaveDelete;
    }

    private void DeleteLeave()
    {
        leave.IsDeleted = true;
        AddOrUpdateLeave();
        ToggleDeleteLeaveClose();
    }



    private void AddOrUpdateLeaveAndClose()
    {
        AddOrUpdateLeave();
        ToggleShowLeave();
    }

    private void AddOrUpdateLeave()
    {
        try
        {
            if (leave.Id == Guid.Empty)
            {
                leave.Id = Guid.NewGuid();
                leave.TenantId = Guid.Parse("00000000-0000-0000-0000-000000000000");
                leave.Employee = employee;
                leave.EmployeeID = employee.Id;
                leave.IsDeleted = false;
                MyDbContext.Leaves.Add(leave);
            }
            else
            {
                MyDbContext.Leaves.Update(leave);
            }
            MyDbContext.SaveChanges();
            leave = new();
            leave.StartDate = DateTime.Now;
            leave.EndDate = DateTime.Now;
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private string DisplayRecipients()
    {
        if (isShowingSmsDialog || isShowingExportDialog)
        {
            var selected = employees.Where(e => selectedEmployees.ContainsKey(e.Id)).Select(e => e.FirstName + " " + e.LastName).ToList();
            int count = selected.Count();

            if (count == 0)
            {
                return "No recipients.";
            }
            else if (count == 1)
            {
                return selected[0];
            }
            else if (count == 2)
            {
                return $"{selected[0]} and {selected[1]}";
            }
            else if (count == 3)
            {
                return $"{selected[0]}, {selected[1]}, and {selected[2]}";
            }
            else
            {
                return $"{selected[0]}, {selected[1]}, and {count - 2} others";
            }
        }
        else {
            return "";
        }
    }

    private void SendMessage()
    {   
        String[] recepientNumbers = employees.Where(e => selectedEmployees[e.Id]).Select(e => e.Telephone).ToArray();
        MessageService.SendSms(phoneNumbers: recepientNumbers, message: smsMessage);
        ToggleShowSmsDialog();

    }

    DateRange startAndEndDateFromTerms()
    {
        List<Term> selectedTerms = new();
        for (int i = 0; i<3; i++){
            if (exportTermsChecked[i])
            {
                selectedTerms.Add(academicYear.Terms.ElementAt(i));
            }   
        }
        var startDate = selectedTerms.Min(term => term.StartDate);
        var endDate = selectedTerms.Max(term => term.EndDate);

        return new DateRange
            {   
                SelectedTerms = selectedTerms,
                StartDate = startDate.DateTime,
                EndDate = endDate.DateTime
            };
        selectedTerms.Clear();

    }


    /*void ExportToPdf()
    {
    //Create a new PDF document.
    PdfDocument document = new PdfDocument();
    //Add a page.
    PdfPage page = document.Pages.Add();
    int paragraphAfterSpacing = 8;
    int cellMargin = 8;
    //Create a new PdfGrid instance.
    PdfGrid pdfGrid = new PdfGrid();
    pdfGrid.Style.CellPadding.Left = cellMargin;
    pdfGrid.Style.CellPadding.Right = cellMargin;
    //Applying built-in style to the PDF grid
    pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
    PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 16);
        //Create a text element to draw a text in PDF page.
        PdfTextElement title = new PdfTextElement("MyComponentInstance.TenantName", font, PdfBrushes.Black);
        PdfLayoutResult result = title.Draw(page, new PointF(0, 0));
        PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10);
        //Create text element.
        PdfTextElement content = new PdfTextElement($"Data Report Generated On {DateTime.Now.ToString("ddd, dd MMM, yyyy h:mmtt")}", contentFont, PdfBrushes.Black);
    PdfLayoutFormat format = new PdfLayoutFormat();
    format.Layout = PdfLayoutType.Paginate;
    //Draw a text to the PDF document.
    result = content.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);
    PdfStandardFont contentFont2 = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
    PdfTextElement content2 = new PdfTextElement($"Bus Passes", contentFont2, PdfBrushes.Black);

    format.Layout = PdfLayoutType.Paginate;
    //Draw a text to the PDF document.
    result = content2.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);
    DateTime start; DateTime end;
    if (exportTermsChecked.Any(e => true))
    {
    var termsStart = startAndEndDateFromTerms();
    start = termsStart.StartDate;
    end = termsStart.EndDate;
    }
    else
    {
    start = ExportStartDate;
    end = ExportEndDate;
    }
    var datasource = AnalysisService.GenerateAttendanceData(start, end, CutoffTime);
    //    var dataSource2 = new BusTicketAnalyzer().AnalyzeJourneyEarningData(MyComponentInstance.allTickets, MyComponentInstance.subscriptions, StartValue3.Value, EndValue3.Value);

    //Assign data source.
    pdfGrid.DataSource = datasource;
    //Draw the grid on the page of a PDF document and store the grid position in PdfGridLayoutResult.
    PdfGridLayoutResult pdfGridLayoutResult = pdfGrid.Draw(page, new PointF(0, result.Bounds.Bottom+5));
    //Initialize PdfGrid and list.

    /*
    pdfGrid = new PdfGrid();
    pdfGrid.Style.CellPadding.Left = cellMargin;
    pdfGrid.Style.CellPadding.Right = cellMargin;
    //Applying built-in style to the PDF grid
    pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
    //Assign data source.
    pdfGrid.DataSource = dataSource2;
    //Draw the grid on the page using previous result.
    PdfTextElement content3 = new PdfTextElement($"Bus Tickets", contentFont2, PdfBrushes.Black);

    format.Layout = PdfLayoutType.Paginate;
    //Draw a text to the PDF document.
    result = content3.Draw(page, new RectangleF(0, pdfGridLayoutResult.Bounds.Bottom + 15, page.GetClientSize().Width, page.GetClientSize().Height), format);

    pdfGrid.Draw(page, new PointF(0, pdfGridLayoutResult.Bounds.Bottom + 30));

    //Saving the PDF to the MemoryStream.
    MemoryStream stream = new MemoryStream();
    document.Save(stream);
    //Close the document.
    document.Close(true);
    //Download the PDF document
    JSRuntime.SaveAs("Report.pdf", stream.ToArray());
    }
    */


    TeacherReportModel GetTeacherReportData(String teacherName, Guid teacherId, DateTime reportStartDate, DateTime reportEndDate, TimeSpan cutoffTime, List<Term> terms)
    {
        using (var context = new MyDbContext())
        {
            // Determine all vacation days based on terms
            HashSet<DateTime> vacationDays = new HashSet<DateTime>();
            foreach (var term in terms)
            {
                for (DateTime date = term.StartDate.DateTime; date <= term.EndDate; date = date.AddDays(1))
                {
                    vacationDays.Add(date);
                }
            }

            // Fetch leaves for the teacher excluding vacation days
            var leaves = context.Leaves.ToList().Where(l => l.EmployeeID == teacherId && !l.IsDeleted && !vacationDays.Contains(l.StartDate.DateTime) && !vacationDays.Contains(l.EndDate.DateTime)).ToList();

            int totalLeaveDays = leaves.Sum(leave =>
            {
                int leaveDays = 0;
                for (DateTime date = leave.StartDate.Date; date <= leave.EndDate.Date; date = date.AddDays(1))
                {
                    if (!vacationDays.Contains(date))
                    {
                        leaveDays++;
                    }
                }
                return leaveDays;
            });

            // Fetch holidays excluding vacation days
            var holidays = context.Holidays.ToList().Where(h => !vacationDays.Contains(h.StartDate.DateTime) && !h.IsDeleted && !vacationDays.Contains(h.EndDate.DateTime)).ToList();

            int totalHolidays = holidays.Sum(holiday =>
            {
                int holidayDays = 0;
                for (DateTime date = holiday.StartDate.Date; date <= holiday.EndDate.Date; date = date.AddDays(1))
                {
                    if (!vacationDays.Contains(date))
                    {
                        holidayDays++;
                    }
                }
                return holidayDays;
            });

            // Calculate total working days excluding weekends, holidays, and vacation days
            int totalWorkingDays = 0;
            for (DateTime date = reportStartDate.Date; date <= reportEndDate.Date; date = date.AddDays(1))
            {
                if (!vacationDays.Contains(date) && !holidays.Any(holiday => holiday.StartDate.Date <= date && holiday.EndDate.Date >= date) && date.DayOfWeek != DayOfWeek.Saturday && date.DayOfWeek != DayOfWeek.Sunday)
                {
                    totalWorkingDays++;
                }
            }

            // Fetch attendance records for the teacher
            var attendanceRecords = context.AttendanceRecords.ToList()
                .Where(ar => ar.EmployeeId == teacherId && ar.Date >= reportStartDate && ar.Date <= reportEndDate)
                .ToList();

            // Calculate attendance data
            var groupedData = Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>()
                .Where(day => day != DayOfWeek.Sunday && day != DayOfWeek.Saturday)
                .Select(day => new TeacherAttendanceDataModel
            {
                DayOfWeek = CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(day),
                EarlyDays = attendanceRecords.Count(record => record.Date.DayOfWeek == day && record.SignInTime.HasValue && record.SignInTime < record.Date.Date.Add(cutoffTime)),
                LateDays = attendanceRecords.Count(record => record.Date.DayOfWeek == day && record.SignInTime.HasValue && record.SignInTime >= record.Date.Date.Add(cutoffTime)),
                DayOrder = (int)day
            })
                .ToList();

            int totalAttendanceDays = groupedData.Sum(data => data.EarlyDays + data.LateDays);
            int totalLateDays = groupedData.Sum(data => data.LateDays);
            int totalEarlyDays = groupedData.Sum(data => data.EarlyDays);

            // Generate report model
            return new TeacherReportModel
        {
            TeacherName = teacherName,
            TotalLeaveDays = totalLeaveDays,
            TotalHolidays = totalHolidays,
            TotalWorkingDays = totalWorkingDays,
            TotalAttendanceDays = totalAttendanceDays,
            TotalLateDays = totalLateDays,
            TotalEarlyDays = totalEarlyDays
        };
        }
    }

    void ExportToPdf()
    {
        // Create a new PDF document.
        PdfDocument document = new PdfDocument();
        PdfPage page = document.Pages.Add();
        int paragraphAfterSpacing = 8;
        int cellMargin = 8;
        PdfGrid pdfGrid = new PdfGrid();
        pdfGrid.Style.CellPadding.Left = cellMargin;
        pdfGrid.Style.CellPadding.Right = cellMargin;
        pdfGrid.ApplyBuiltinStyle(PdfGridBuiltinStyle.GridTable4Accent1);
        PdfStandardFont font = new PdfStandardFont(PdfFontFamily.TimesRoman, 16);
        PdfTextElement title = new PdfTextElement($"Attendance Report", font, PdfBrushes.LightBlue);
        PdfLayoutResult result = title.Draw(page, new PointF(0, 0));

        PdfStandardFont font1 = new PdfStandardFont(PdfFontFamily.TimesRoman, 13);
        PdfTextElement institution = new PdfTextElement("BOMSO M/A J.H.S", font1, PdfBrushes.Black);
        result = institution.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height));
        PdfStandardFont contentFont = new PdfStandardFont(PdfFontFamily.TimesRoman, 10);
        PdfTextElement content = new PdfTextElement($"Data Report Generated On {DateTime.Now:ddd, dd MMM, yyyy h:mmtt}", contentFont, PdfBrushes.Black);
        PdfLayoutFormat format = new PdfLayoutFormat { Layout = PdfLayoutType.Paginate };
        result = content.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);


        var termsStart = startAndEndDateFromTerms();
        PdfStandardFont font2 = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
        PdfTextElement period = new PdfTextElement($"Attendance Data from {termsStart.StartDate:ddd, dd MMM, yyyy} to {termsStart.EndDate:ddd, dd MMM, yyyy}", font2, PdfBrushes.Black);
        result = period.Draw(page,new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height));


        var selectedNames = employees.Where(e => selectedEmployees.ContainsKey(e.Id)).Select(e => e.FirstName + " " + e.LastName).ToList();
        var selectedIds = employees.Where(e => selectedEmployees.ContainsKey(e.Id)).Select(e => e.Id).ToList();

        for (int i = 0; i< selectedIds.Count; i++)
        {

            var reportModel = GetTeacherReportData(selectedNames[i], selectedIds[i], termsStart.StartDate, termsStart.EndDate, CutoffTime, termsStart.SelectedTerms);


            PdfStandardFont contentFont2 = new PdfStandardFont(PdfFontFamily.TimesRoman, 12);
            PdfTextElement content2 = new PdfTextElement($"Data for {reportModel.TeacherName}", contentFont2, PdfBrushes.Black);
            result = content2.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);


            // Summary section
            PdfTextElement summary = new PdfTextElement($"Total Leave Days: {reportModel.TotalLeaveDays}\n" +
                                                        $"Total Working Days: {reportModel.TotalWorkingDays}\n" +
                                                        $"Total Attendance Days: {reportModel.TotalAttendanceDays}\n" +
                                                        $"Total Late Days: {reportModel.TotalLateDays}\n" +
                                                        $"Total Early Days: {reportModel.TotalEarlyDays}", contentFont2, PdfBrushes.Black);
            result = summary.Draw(page, new RectangleF(0, result.Bounds.Bottom + paragraphAfterSpacing, page.GetClientSize().Width, page.GetClientSize().Height), format);

            // Attendance records
            PdfTextElement attendanceTitle = new PdfTextElement("Attendance Records", contentFont2, PdfBrushes.Black);
            result = attendanceTitle.Draw(page, new PointF(0, result.Bounds.Bottom + paragraphAfterSpacing));

            var reportData = AnalysisService.GenerateTeacherAttendanceData(selectedIds[i],termsStart.StartDate,termsStart.EndDate,CutoffTime);
            pdfGrid.DataSource = reportData;
            pdfGrid.Draw(page, new PointF(0, result.Bounds.Bottom + 5));
        }
        // Save the document
        using (MemoryStream stream = new MemoryStream())
        {
            document.Save(stream);
            document.Close(true);
            String name1 = "";
            if (selectedNames.Count == 1)
            {
                name1 = selectedNames.ElementAt(0);
            }
            else
            {
                name1 = "Teachers";
            }
            JSRuntime.SaveAs($"{name1}_AttendanceReport_{DateTime.Now:ddd, dd MMM, yyyy}.pdf", stream.ToArray());
            ToggleShowExportDialog();
        }
    }

    public AcademicYear GetActiveOrClosestAcademicYear(IEnumerable<AcademicYear> academicYears)
    {
        DateTimeOffset currentDate = DateTimeOffset.Now;

        // Try to find the active academic year first
        var activeAcademicYear = academicYears.FirstOrDefault(year =>
            year.Terms.Any(term =>
                term.StartDate <= currentDate &&
                term.EndDate >= currentDate &&
                !term.IsDeleted));

        if (activeAcademicYear != null)
        {
            return activeAcademicYear;
        }

        // If no active academic year is found, find the closest term date
        AcademicYear closestAcademicYear = null;
        DateTimeOffset? closestDate = null;

        foreach (var year in academicYears)
        {
            foreach (var term in year.Terms)
            {
                if (term.IsDeleted) continue;

                if (closestDate == null ||
                    Math.Abs((term.StartDate - currentDate).Ticks) < Math.Abs((closestDate.Value - currentDate).Ticks) ||
                    Math.Abs((term.EndDate - currentDate).Ticks) < Math.Abs((closestDate.Value - currentDate).Ticks))
                {
                    closestDate = term.StartDate;
                    closestAcademicYear = year;
                }
            }
        }

        return closestAcademicYear;
    }



    class SelectEmployee
    {
        public Employee employee { get; set; }
        public bool isSelected { get; set; }
    }
    public  class DateRange
    {
        public List<Term> SelectedTerms { get; set; } = new();
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }


   public class TeacherReportModel
    {
        public string TeacherName { get; set; }
        public int TotalLeaveDays { get; set; }
        public int TotalHolidays { get; set; }
        public int TotalWorkingDays { get; set; }
        public int TotalAttendanceDays { get; set; }
        public int TotalLateDays { get; set; }
        public int TotalEarlyDays { get; set; }
}

}
