@page "/attendance_logs"
@using System.Threading.Tasks

<div style="margin: 20px;">
        <div style="padding: 20px; box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);">
        <div style="display: flex;justify-content: space-between; align-items: center">
        <div style="display:2  flex; flex-direction: column">
            <h6><b>Employee Attendance</b></h6>
                    <p class="titleSubtext">Keep track of attendance</p>
        </div>

            <input style="border: 1px solid grey;" type="date" @bind="@selectedDate" @bind:event="oninput" @onchange="HandleDateChange">

        </div>
        <div style="display: flex;justify-content: space-between; align-items: center">
                <div class="search-container">
                    <svg style="height: 20px;margin-left: 8px;margin-right: 8px" xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 512 512">
                        <path d="M10.88,214.5c0,112.54,91.56,204,204,204,51.8,0,99.19-19.48,135.23-51.4l130.01,130.01c2.41,2.41,5.52,3.61,8.73,3.61s6.32-1.2,8.73-3.61c4.82-4.82,4.82-12.55,0-17.37l-130.11-130.01c31.92-36.04,51.4-83.33,51.4-135.23,0-112.54-91.56-204-204-204S10.88,101.96,10.88,214.5ZM394.27,214.5c0,98.89-80.51,179.4-179.4,179.4S35.47,313.38,35.47,214.5,115.99,35.1,214.87,35.1s179.4,80.41,179.4,179.4Z" stroke-width="0" />
                    </svg>
                    <input class="search-input"
                       type="text" @bind-value="@SearchText" @oninput="HandleSearch" placeholder="Search">

                <div class="clear-button-container"  style="@(searchTextEmpty ? "visibility: hidden;" : "visibility: visible;")" @onclick="ClearSearch">
                        <svg class="clear-button" xmlns="http://www.w3.org/2000/svg" id="Layer_1" data-name="Layer 1" viewBox="0 0 512 512">
                            <path d="M259.73,482.34c-39.67-.7-75.33-8.45-108.87-25.47-28.19-14.3-52.32-33.39-72.96-57.44-16.46-19.17-27.73-40.92-37.54-63.89-11.13-26.05-15.07-53.28-15.03-81.19.03-23.33,3.42-46.43,11.74-68.28,8.73-22.91,19.17-45.17,34.67-64.51,20.01-24.98,43.77-45.79,71.99-60.99,30.84-16.61,63.84-26.14,98.99-28.2,40.42-2.37,78.81,5.07,115.42,22.28,27.54,12.95,51.3,30.69,72.06,53.05,14.57,15.7,25.45,33.46,35.41,52.13,16.86,31.61,23.23,65.6,22.96,100.92-.22,28.33-5.5,56.04-17.24,81.89-9.39,20.66-20.47,40.62-35.65,57.82-19.95,22.61-42.99,41.55-69.89,55.28-29.54,15.07-60.92,24.06-94.22,25.75-4.7.24-9.39.66-11.84.83v.02ZM262.55,467.5c5.66.32,16.83-.94,27.89-2.63,41.11-6.29,77.53-23.14,109.57-49.59,13.5-11.15,24.7-24.52,35.1-38.36,18.55-24.69,29.15-53.31,35.25-83.18,5.72-28,4.93-56.21-2.79-84.25-8.16-29.62-19.5-57.34-39.61-81.05-10.52-12.4-21.32-24.28-34.27-34.38-21.81-17-45.65-29.61-72.06-37.73-34.38-10.56-69.24-12.4-104.49-6.13-41.17,7.32-77.1,25.67-108.36,53.21-15.09,13.3-27.6,29.07-37.91,46.13-23.27,38.51-32.85,80.55-28.83,125.49,3.25,36.24,14.11,69.76,35.81,99.44,10.85,14.84,22.1,29.16,36.74,40.67,11.51,9.04,23.04,17.79,35.95,24.91,33.2,18.31,68.71,26.92,112.03,27.47l-.02-.02Z" stroke="#000" stroke-miterlimit="10" stroke-width="5" />
                            <path d="M181.08,175.79c2.55-.15,4.61,1.06,6.41,2.83,2.77,2.74,5.51,5.52,8.29,8.25,18.19,17.86,36.39,35.71,54.59,53.57.35.34.69.69,1.05,1.02,5.85,5.3,5.82,5.27,11.52-.35,19.9-19.6,39.82-39.18,59.78-58.72,1.85-1.81,3.94-3.38,6.02-4.93,3.37-2.5,7.76-2.31,10.15.54,2.68,3.2,2.57,6.75-.07,9.77-3.42,3.9-6.95,7.81-10.97,11.06-6.09,4.93-11.32,10.71-16.91,16.12-13.17,12.77-26.22,25.67-39.48,38.34-2.97,2.84-2.84,4.6.05,7.4,17.27,16.71,34.24,33.73,51.62,50.32,4.92,4.7,10.06,9.18,14.81,14.07,3.69,3.79,3.95,8.16.91,11.22-2.91,2.93-6.87,2.7-10.92-.41-3.23-2.48-6.18-5.24-9.07-8.09-19.31-19.04-38.71-37.99-57.95-57.1-2.53-2.51-4.37-2.8-6.83-.29-1.24,1.27-2.8,2.21-4.06,3.46-20.51,20.14-41,40.3-61.5,60.45-1.85,1.82-3.6,3.69-6.47,3.99-3.36.35-6.24-.34-7.99-3.39-1.83-3.17-1.36-6.28,1.13-8.96,1.88-2.02,3.71-4.17,5.92-5.78,3.05-2.22,5.61-4.92,8.27-7.53,17.63-17.28,35.18-34.63,52.93-51.79,3.07-2.97,3.16-4.74.04-7.77-19.24-18.65-38.25-37.53-57.45-56.22-3.13-3.04-6.83-5.5-9.64-8.89-2.17-2.61-2.71-5.54-1.15-8.61,1.4-2.77,3.88-3.78,6.99-3.59h-.02Z" stroke="#000" stroke-miterlimit="10" stroke-width="5" />
                        </svg>
                    </div>
                    
                </div>
        </div>
        </div>
    <div class="tableFixHead" style="border-top: none; max-height: calc(90vh - 170px);">

    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email Address</th>
                <th>Telephone</th>
                <th>Check In</th>
                <th>Check Out</th>
            </tr>
        </thead>
        <tbody>
                @foreach (var item in attendanceRecords.Where(e => e.Date.Date == selectedDate.Date))
            {
                <tr>
                    <td>@item.Employee.Username</td>
                        <td>@item.Employee.FirstName @item.Employee.LastName</td>
                    <td>@item.Employee.Email</td>
                        <td>@item.Employee.Telephone</td>
                        <td>@item.SignInTime.Value.ToString("hh:mmtt")</td>
                        <td>@if (@item.SignOutTime == null)
                            {
                                <p>--:--</p>
                            }
                            else
                            {
                                @item.SignOutTime.Value.ToString("hh:mmtt");
                            }
                        </td>
                </tr>
            }

        </tbody>
    </table>
</div>
</div>

@code {
    String SearchText = "";
    DateTime selectedDate = DateTime.Now;
    List<AttendanceRecord> attendanceRecords = new();

    bool isBusy = true;
    


    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        await Task.Run(LoadAttendanceRecord);
        isBusy = false;

        //  AuthenticationViewModel.IsBusy = false;
    }

    private async Task LoadAttendanceRecord()
    {
        attendanceRecords = MyDbContext.AttendanceRecords.Include(e => e.Employee).ToList().Where(e => e.Employee.Username != "BMA000" && e.Date.Date == selectedDate.Date).ToList();
    }

    private void HandleDateChange(ChangeEventArgs e)
    {
        // Update the selectedDate property with the new value
        if (DateTime.TryParse(e.Value.ToString(), out DateTime newDate))
        {
            selectedDate = newDate;
            LoadAttendanceRecord();
        }
    }

    bool searchTextEmpty = true;
    private void HandleSearch(ChangeEventArgs eventArgs)
    {   
        string searchValue = eventArgs.Value.ToString().ToLower();
        if (string.IsNullOrEmpty(searchValue))
        {
            searchTextEmpty = true;
        }
        else
        {
            searchTextEmpty = false;
        }
        attendanceRecords = MyDbContext.AttendanceRecords.Include(e => e.Employee).ToList().Where(e => e.Employee.Username != "BMA000" && e.Employee.FirstName.ToLower().Contains(eventArgs.Value.ToString().ToLower()) || e.Employee.LastName.ToLower().Contains(eventArgs.Value.ToString().ToLower()) || (e.Employee.FirstName+ " " + e.Employee.LastName).ToLower().Contains(eventArgs.Value.ToString().ToLower()) || (e.Employee.LastName + " " + e.Employee.FirstName).ToLower().Contains(eventArgs.Value.ToString().ToLower())).ToList();

    }

    private void ClearSearch()
    {
        SearchText = "";
        attendanceRecords = MyDbContext.AttendanceRecords.ToList();
    }

    private void load(){

        try
        {
            LoadAttendanceRecord();

        }
        catch (Exception ex)
        {

        }
        finally
        {

        }

    }
}
