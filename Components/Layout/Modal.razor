@page "/modal"


<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .main-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        width: 100%;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
    }
</style>

<div class="modal-overlay @(IsVisible ? "fadeIn" : "")" @onclick="() => { if (IsVisible) Toggle();}" style="display: @(IsVisible ? "flex" : "none")">
    <div class="main-content">
        <div class="modal-content @(IsVisible ? "show-popup" : "")" style="width: @(Width);" @onclick:stopPropagation="true" @onclick:preventDefault="true">

            @ChildContent

        </div>
    </div>
</div>

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public string Width { get; set; }
    DateTime selectedDate = DateTime.Now;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("modalHelper.initialize", DotNetObjectReference.Create(this));
        }
    }

    [JSInvokable]
    public async Task HandleEscapeKeyPress()
    {
        if (IsVisible)
        {
            await Toggle();
        }
    }

    public async Task Toggle()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
    }
}
